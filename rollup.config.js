import typescript from '@rollup/plugin-typescript';
import {nodeResolve} from '@rollup/plugin-node-resolve';
import commonjs from '@rollup/plugin-commonjs';
import postcss from 'rollup-plugin-postcss';
import fs,{copyFileSync} from 'fs';
import child from 'child_process'; 

{
  copyFileSync('../ZYCommonLib/SignatureCheck.ts',`src/zylib/SignatureCheck.ts`);
  copyFileSync('../ZYCommonLib/CommonTool.ts',`src/zylib/CommonTool.ts`);
  copyFileSync('../ZYCommonLib/CChooseFileModal.ts',`src/zylib/CChooseFileModal.ts`);
  copyFileSync('../ZYCommonLib/CChooseTagModal.ts',`src/zylib/CChooseTagModal.ts`);
  copyFileSync('../ZYCommonLib/utility.ts',`src/zylib/utility.ts`);
};

class rollupPlugin {
  constructor(){
    this.closeBundle = function(context) {
      // const fileRelative = '.obsidian/plugins/tag-wrangler/main.js';
      // fs.copyFile('/Users/zhenyu/Documents/MapFolder/'+fileRelative,
      // '/Users/zhenyu/Documents/Vocabulary/'+fileRelative, (err) => {
      //   if (err) throw err;
      //     console.log('copy success');
      //   }
      // );
      const manifestFromPath = `./manifest.json`;
      let manifestJson = null;
      let pluginId = null;
      //判断是否存在此文件
      if (fs.existsSync(manifestFromPath)) {
          //读取文件内容，并转化为Json对象
          manifestJson = JSON.parse(fs.readFileSync(manifestFromPath, "utf8"));
          //获取Json里key为data的数据
          pluginId = manifestJson['id'];
      }

      if (pluginId) {
          child.exec(`~/bin/obsidianReloadPlugin "${pluginId}"`, (err, sto)=> {
              if (err) {
                  console.error(err);
                  return;
              }
              process.exit(0);
          })
      } else {
          process.exit(0);
      }
    }
  }
}

const isProd = (process.env.BUILD === 'production');

const banner = 
`/*
THIS IS A GENERATED/BUNDLED FILE BY ROLLUP
if you want to view the source visit the plugins github repository
*/
`;

export default {
  input: 'src/main.ts',
  output: {
    file: '../../.obsidian/plugins/tag-wrangler/main.js',
    sourcemap: false,
    sourcemapExcludeSources: isProd,
    format: 'cjs',
    exports: 'default',
    banner,
  },
  external: ['obsidian'],
  plugins: [
    // terser(),
    typescript({               // TS 插件配置
      tsconfig: './tsconfig.json',
      exclude: []// 排除测试文件
    }),
    nodeResolve({browser: true}),
    commonjs(),
    postcss(), // 抽取单文件到 ./dist/css 文件夹下 extract: resolve(`dist/css/filename.css`)
    new rollupPlugin()
  ]
};